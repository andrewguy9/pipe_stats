#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use File::Temp qw/ tempfile /;

# 1 copy file
# 2 less file
# 3 edit screen
# 4 compare filters
# 5 apply filters/select file
# 6 goto 2

my $result = GetOptions() or die usage();

my @buffers = ();
my @filters = ();

# Set up file
die usage("File must be specified") unless defined $ARGV[0];
open my $orig_file, "<", $ARGV[0] or die usage("Unable to open file");
push @buffers, file_to_buffer($orig_file);
close $orig_file;

do
{
        view_buffer($buffers[-1]);
        my @new_filters = edit_filters(@filters);
        apply_filters(\@buffers, \@filters, \@new_filters);
        @filters = @new_filters;

} while(@filters);





sub usage{
        my $msg = shift@_;

        print STDERR "$msg\n";
        print STDERR "lessless file";
        print STDERR "Runs less on a file specified by command line.";
        print STDERR "After returning from less, the user will have the option of adding";
        print STDERR "filters to be applied to the file. Less is then called on the filtered file";
}

sub file_to_buffer {
        my $fd = shift @_;

        my @buffer = ();

        while(<$fd>) {
                push @buffer, $_;
        }
        return \@buffer;
}

sub view_buffer {
        my $buffer = shift @_;

        my $less_pid = open my $less_stdin, "|-", "less" or die "Could not fork less: $!";
        for my $line (@$buffer) {
                print $less_stdin $line;
        }
}

sub edit_filters
{
        my @filters = @_;

        (my $flt_fh, my $flt_name) = tempfile() or die "Could not open temp file: $!";
        for my $filter (@filters) {
                print $flt_fh "$filter\n";
        }

        if (fork) {
                wait;
        } else {
                exec ("vim", "$flt_name");
        }

        @filters = ();
        open my $flt_in, "<", $flt_name or die "Could not open temp file: $!";
        while(<$flt_in>) {
                chomp;
                push @filters, $_;
        }

        close $flt_in;
        close $flt_fh;
        unlink ($flt_name);

        return @filters;
}

sub apply_filters
{
        (my $buffers, my $filters, my $new_filters) = @_;

        my $orig_buffer = @$buffers[0];
        my @new_buffer = ();

        for my $line (@$orig_buffer) {
                chomp $line;
                my $blocked = 0;
                for my $filter (@$new_filters) {
                        if ($line =~ /($filter)/) {
                                $blocked = 1;
                                last;
                        }
                }
                if (!$blocked) {
                        push @new_buffer, "$line\n";
                }
        }

        @$buffers[1] = \@new_buffer;
}
