#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

my $sleep_time = 1;
my $verbose = 0;

my $result = GetOptions(
        "sleep=f" => \$sleep_time,
        "verbose" => \$verbose,
) or die usage("Invalid Input $!");

my @files = @ARGV;

my %fds = (); # keys are names, values are file descriptors.
my %inodes = (); # keys are names, values are inode numbers.
my %sizes = (); # keys are names, values are file sizes.
my $go = 1;
while($go) {

        # See if inodes changed
        my @changed_files = ();
        for my $filename (@files) {
                my @stats = stat $filename or next;
                my $inode = $stats[1];
                my $size = $stats[7];

                if (! $inodes{$filename} or $inode != $inodes{$filename}) {
                        print STDERR "File $filename changed\n";
                        push @changed_files, $filename;
                } elsif (! $sizes{$filename} or $size < $sizes{$filename}) {
                        print STDERR "File $filename was truncated\n";
                        push @changed_files, $filename;
                }
        }


        # Read what we can from old descriptos
        for my $fd (values %fds) {

                while(<$fd>) {
                        my $line = $_;
                        print $_;
                }
        }

        # Try and open descriptors to files which changed or are not open
        for my $filename (@changed_files)
        {
                if ($fds{$filename} ) {
                        my $fd = $fds{$filename};
                        close $fd;
                }

                open my $fd, "<", $filename;
                if ($fd <=2) {
                        print STDERR "Failed to open $filename\n" if $verbose;
                        next;
                }
                $fds{$filename} = $fd;

                my @stats = stat $fd or die "Failed to stat $filename with $!";
                $inodes{$filename} = $stats[1];
                $sizes{$filename} = $stats[7];
        }

        sleep $sleep_time;
        $go = 1;
}
